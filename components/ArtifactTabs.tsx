"use client";

import { useState, useEffect } from "react";
import { Artifact } from "@/lib/orchestrator";

// Tab configuration
const tabConfig = [
  {
    id: "PRD",
    label: "PRD",
    title: "Product Requirements Document",
    icon: "ðŸ“‹",
    description: "Problem statement, target users, key features, and success metrics",
    placeholder: "The Product Requirements Document will appear here once generated by the Product Manager..."
  },
  {
    id: "Timeline", 
    label: "Timeline",
    title: "Project Timeline",
    icon: "ðŸ“…",
    description: "Project milestones, deadlines, and risk management",
    placeholder: "The project timeline will appear here once generated by the Project Manager..."
  },
  {
    id: "Engineering",
    label: "Engineering",
    title: "Engineering Plan", 
    icon: "âš¡",
    description: "Technical architecture, task breakdown, and implementation details",
    placeholder: "The engineering plan will appear here once generated by the Senior Engineer..."
  },
  {
    id: "Marketing",
    label: "Marketing",
    title: "Marketing Strategy",
    icon: "ðŸ“¢", 
    description: "Brand positioning, landing copy, and marketing materials",
    placeholder: "The marketing strategy will appear here once generated by the Marketing Lead..."
  }
];

interface ArtifactTabsProps {
  artifacts: Record<string, Artifact>;
  onArtifactUpdate?: (artifactId: string, newContent: string) => void;
  className?: string;
}

interface EditableArtifactProps {
  artifact?: Artifact;
  tabInfo: typeof tabConfig[0];
  onUpdate?: (content: string) => void;
}

function EditableArtifact({ artifact, tabInfo, onUpdate }: EditableArtifactProps) {
  const [content, setContent] = useState(artifact?.content || "");
  const [isEditing, setIsEditing] = useState(false);
  const [hasChanges, setHasChanges] = useState(false);

  useEffect(() => {
    setContent(artifact?.content || "");
    setHasChanges(false);
  }, [artifact]);

  const handleContentChange = (newContent: string) => {
    setContent(newContent);
    setHasChanges(newContent !== (artifact?.content || ""));
  };

  const handleSave = () => {
    if (hasChanges && onUpdate) {
      onUpdate(content);
      setHasChanges(false);
    }
    setIsEditing(false);
  };

  const handleCancel = () => {
    setContent(artifact?.content || "");
    setHasChanges(false);
    setIsEditing(false);
  };

  const isEmpty = !artifact || !artifact.content;

  return (
    <div className="h-full flex flex-col">
      {/* Header */}
      <div className="flex-shrink-0 border-b border-gray-200 p-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <span className="text-2xl">{tabInfo.icon}</span>
            <div>
              <h3 className="text-lg font-semibold text-gray-900">
                {tabInfo.title}
              </h3>
              <p className="text-sm text-gray-600">
                {tabInfo.description}
              </p>
            </div>
          </div>
          
          {!isEmpty && (
            <div className="flex items-center space-x-2">
              {hasChanges && (
                <span className="text-xs text-orange-600 bg-orange-100 px-2 py-1 rounded-full">
                  Unsaved changes
                </span>
              )}
              
              {isEditing ? (
                <div className="flex space-x-2">
                  <button
                    onClick={handleSave}
                    className="px-3 py-1 text-xs bg-green-600 text-white rounded-md hover:bg-green-700"
                  >
                    Save
                  </button>
                  <button
                    onClick={handleCancel}
                    className="px-3 py-1 text-xs bg-gray-600 text-white rounded-md hover:bg-gray-700"
                  >
                    Cancel
                  </button>
                </div>
              ) : (
                <button
                  onClick={() => setIsEditing(true)}
                  className="px-3 py-1 text-xs bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  Edit
                </button>
              )}
            </div>
          )}
        </div>
        
        {artifact && (
          <div className="mt-2 flex items-center space-x-4 text-xs text-gray-500">
            <span>Created by {artifact.agentName}</span>
            <span>â€¢</span>
            <span>{new Date(artifact.timestamp).toLocaleString()}</span>
          </div>
        )}
      </div>

      {/* Content */}
      <div className="flex-1 p-4">
        {isEmpty ? (
          <div className="h-full flex items-center justify-center">
            <div className="text-center">
              <div className="text-4xl mb-4">{tabInfo.icon}</div>
              <h4 className="text-lg font-medium text-gray-900 mb-2">
                No {tabInfo.label} Yet
              </h4>
              <p className="text-gray-600 max-w-sm">
                {tabInfo.placeholder}
              </p>
            </div>
          </div>
        ) : (
          <div className="h-full">
            {isEditing ? (
              <textarea
                value={content}
                onChange={(e) => handleContentChange(e.target.value)}
                className="w-full h-full p-4 border border-gray-300 rounded-lg resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono text-sm"
                placeholder={`Edit ${tabInfo.title}...`}
              />
            ) : (
              <div className="h-full overflow-y-auto">
                <pre className="whitespace-pre-wrap font-mono text-sm text-gray-800 p-4 bg-gray-50 rounded-lg border">
                  {content}
                </pre>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}

export default function ArtifactTabs({ artifacts, onArtifactUpdate, className = "" }: ArtifactTabsProps) {
  const [activeTab, setActiveTab] = useState("PRD");

  // Get artifact for current tab
  const getArtifactForTab = (tabId: string): Artifact | undefined => {
    return Object.values(artifacts).find(artifact => 
      artifact.type === tabId || 
      (tabId === "Engineering" && artifact.type === "architecture") ||
      (tabId === "Marketing" && (artifact.type === "landing_copy" || artifact.type === "brand_assets"))
    );
  };

  // Count available artifacts
  const artifactCounts = tabConfig.reduce((acc, tab) => {
    acc[tab.id] = getArtifactForTab(tab.id) ? 1 : 0;
    return acc;
  }, {} as Record<string, number>);

  const totalArtifacts = Object.values(artifactCounts).reduce((sum, count) => sum + count, 0);

  const handleArtifactUpdate = (tabId: string, newContent: string) => {
    const artifact = getArtifactForTab(tabId);
    if (artifact && onArtifactUpdate) {
      onArtifactUpdate(artifact.id, newContent);
    }
  };

  return (
    <div className={`flex flex-col h-full bg-white ${className}`}>
      {/* Tab Header */}
      <div className="flex-shrink-0 border-b border-gray-200">
        <div className="flex items-center justify-between px-4 py-3">
          <h2 className="text-lg font-semibold text-gray-900">
            Startup Deliverables
          </h2>
          <div className="text-sm text-gray-600">
            {totalArtifacts} of {tabConfig.length} completed
          </div>
        </div>
        
        {/* Tab Navigation */}
        <div className="flex space-x-0">
          {tabConfig.map((tab) => {
            const hasArtifact = artifactCounts[tab.id] > 0;
            const isActive = activeTab === tab.id;
            
            return (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex-1 px-4 py-3 text-sm font-medium border-b-2 transition-colors ${
                  isActive
                    ? 'border-blue-500 text-blue-600 bg-blue-50'
                    : 'border-transparent text-gray-600 hover:text-gray-900 hover:bg-gray-50'
                }`}
              >
                <div className="flex items-center justify-center space-x-2">
                  <span>{tab.icon}</span>
                  <span>{tab.label}</span>
                  {hasArtifact && (
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  )}
                </div>
              </button>
            );
          })}
        </div>
      </div>

      {/* Tab Content */}
      <div className="flex-1 overflow-hidden">
        {tabConfig.map((tab) => (
          <div
            key={tab.id}
            className={`h-full ${activeTab === tab.id ? 'block' : 'hidden'}`}
          >
            <EditableArtifact
              artifact={getArtifactForTab(tab.id)}
              tabInfo={tab}
              onUpdate={(content) => handleArtifactUpdate(tab.id, content)}
            />
          </div>
        ))}
      </div>

      {/* Footer */}
      <div className="flex-shrink-0 border-t border-gray-200 px-4 py-3 bg-gray-50">
        <div className="flex items-center justify-between text-xs text-gray-600">
          <span>
            Click &quot;Edit&quot; to modify any deliverable. Changes are saved automatically.
          </span>
          <div className="flex items-center space-x-4">
            <span className="flex items-center space-x-1">
              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
              <span>Complete</span>
            </span>
            <span className="flex items-center space-x-1">
              <div className="w-2 h-2 bg-gray-300 rounded-full"></div>
              <span>Pending</span>
            </span>
          </div>
        </div>
      </div>
    </div>
  );
}
